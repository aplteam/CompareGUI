 R←CheckParms Parms∆Allowed;Allowed;Parms;Depth;Bool;Buffer
⍝⍝ Check a parameter vector for valid entries. Valid entries are defined by Allowed.
⍝S Allowed is interpreted as a vector of possible valid names.
⍝S R becomes a matrix. [;1] contains the parameter names, [;2] the values
⍝S In case of an invalid parameters, an error is generated by ⎕SIGNAL.
⍝S If no parameter is defined:  R←0 2⍴' '
⍝C Copyright APL Team Ltd ⋄ http://www.aplteam.de ⋄ mailto:kai@aplteam.de
⍝I Check utilities;Parameters, check;Validation of data
⍝V Version: 2.2.1
 R←''                           ⍝ Initialyze the result
 Parms Allowed←Parms∆Allowed    ⍝ Separate right argument
 :If 3>|≡Parms                  ⍝ Handle...
 :AndIf 2∨.≠↑¨⍴¨Parms
     Parms←,⊂Parms              ⍝ ...Parms!
 :EndIf
 :If 2∨.≠↑¨⍴¨Parms←,Parms       ⍝ Check for proper structure.
     R←''                       ⍝ Structure invalid, complete faulty!
 :Else
     Parms←↑,/Parms             ⍝ Make simple vector
     Depth←|≡Parms              ⍝ Save the Depth
     :If 0=Depth
         R←0 2⍴''               ⍝ Ready if empty: nothing right, nothing wrong...
     :EndIf
     :If Depth∊0 1              ⍝ Jump if not simple
         Parms←,⊂Parms          ⍝ Enforce a nested vector
     :EndIf
     :If 0≠2|⍴Parms←,Parms      ⍝ Jump if even number of items
         R←''                   ⍝ Structur invalid, get out!
     :Else
         Buffer←((⌊0.5×⍴Parms),2)⍴Parms ⍝ Build a matrix
         Buffer[;1]←(⊂[2]1 ⎕C⊃Buffer[;1])~¨' '
         :If (|≡Allowed)∊0 1    ⍝ Jump if Allowed is not simple
             Allowed←⊂Allowed   ⍝ Enforce nested
         :EndIf
         Allowed←,Allowed       ⍝ Enforce a vector
         Allowed←1 ⎕C¨Allowed
         Bool←Buffer[;1]∊Allowed  ⍝ Column 1 must be member of Allowed
         :If 1∨.≠Bool
             ('Invalid Parameter: ',1↓↑,/' ',¨(~Bool)/Buffer[;1])⎕SIGNAL 11
         :EndIf
         R←Buffer               ⍝ All is fine
     :EndIf
 :EndIf
